# Generated by Django 4.2.8 on 2024-11-19 19:11

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('surname', models.CharField(blank=True, max_length=50)),
                ('profile', models.CharField(blank=True, max_length=50)),
                ('course', models.IntegerField(null=True)),
                ('additional_info', models.TextField(null=True)),
                ('gpa', models.FloatField(blank=True, null=True)),
                ('perc', models.FloatField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'custom_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdditionalMaterials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('content', models.BinaryField()),
            ],
            options={
                'verbose_name': 'Дополнительный материал',
                'verbose_name_plural': 'Дополнительные материалы',
                'db_table': 'additionalmaterials',
            },
        ),
        migrations.CreateModel(
            name='ControlEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Kонтрольное мероприятие',
                'verbose_name_plural': 'Контрольные мероприятия',
                'db_table': 'controlevent',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lesson_number', models.IntegerField(null=True)),
                ('week_number', models.IntegerField(null=True)),
                ('startTime', models.DateTimeField()),
                ('endTime', models.DateTimeField()),
                ('date', models.DateField()),
            ],
            options={
                'verbose_name': 'Занятие',
                'verbose_name_plural': 'Занятия',
                'db_table': 'lesson',
            },
        ),
        migrations.CreateModel(
            name='LessonLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Аудитория',
                'verbose_name_plural': 'Аудитории',
                'db_table': 'lessonlocation',
            },
        ),
        migrations.CreateModel(
            name='StudentGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Группа студентов',
                'verbose_name_plural': 'Группы студентов',
                'db_table': 'studentgroup',
            },
        ),
        migrations.CreateModel(
            name='TypeOfControlEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Тип контрольного мероприятия',
                'verbose_name_plural': 'Типы контрольных мероприятий',
                'db_table': 'typeofcontrolevent',
            },
        ),
        migrations.CreateModel(
            name='TypeOfLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Тип занятия',
                'verbose_name_plural': 'Тип занятий',
                'db_table': 'typeoflesson',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('additional_materials', models.ManyToManyField(to='core.additionalmaterials')),
                ('control_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.controlevent')),
                ('groups', models.ManyToManyField(to='core.studentgroup')),
            ],
            options={
                'verbose_name': 'Предмет',
                'verbose_name_plural': 'Предметы',
                'db_table': 'subject',
            },
        ),
        migrations.CreateModel(
            name='LessonArchive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attendance', models.BooleanField(default=False)),
                ('lessonId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.lesson')),
                ('userId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Архив занятий',
                'verbose_name_plural': 'Архив занятий',
                'db_table': 'lessonarchive',
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='groupId',
            field=models.ManyToManyField(blank=True, to='core.studentgroup'),
        ),
        migrations.AddField(
            model_name='lesson',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.lessonlocation'),
        ),
        migrations.AddField(
            model_name='lesson',
            name='subjectId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.subject'),
        ),
        migrations.AddField(
            model_name='lesson',
            name='teacherId',
            field=models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lesson',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.typeoflesson'),
        ),
        migrations.CreateModel(
            name='ControlEventMark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mark', models.IntegerField()),
                ('controlWorkId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.controlevent')),
                ('userId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Оценка за контрольное мероприятие',
                'verbose_name_plural': 'Оценки за контрольные мероприятия',
                'db_table': 'controleventmark',
            },
        ),
        migrations.AddField(
            model_name='controlevent',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.typeofcontrolevent'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='student_groups',
            field=models.ManyToManyField(to='core.studentgroup'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
